.\run_tester_multiple.ps1 -Trials 20 -LoopsValue 10 -SolutionName toml1s -CorrectionPrompt 'The config.toml file should define a Chainlink job that creates an external price oracle. The job listens for oracle requests with external generated in the uuid standard. When triggered, it performs a GET request to the CoinGecko API to fetch the price of Ethereum in USD, parses the result, multiplies it by 100 (to handle decimals), and sends the result back . The data pipeline includes decoding the request log, HTTP fetch, JSON parsing, value multiplication, and data encoding for the response transaction. The job includes all essential Job Configuration properties at the top of the file. These include: type (defines the job type, e.g., "directrequest"), schemaVersion (typically set to 1), name (a human-readable identifier), externalJobID (choose a new unique UUID randomly), contractAddress (address of the triggering smart contract, required for job types like directrequest), evmChainID (identifies the EVM chain, e.g., 1 for Ethereum mainnet or 1337 for local testnets), forwardingAllowed (boolean, often false for direct requests), minIncomingConfirmations (minimum block confirmations before processing, e.g., 0), minContractPaymentLinkJuels (minimum LINK payment in juels, e.g., "0"), and maxTaskDuration (maximum time a task may run, e.g., "30s"). When generating or validating a job spec, include these fields with appropriate formatting and values based on the job type, and follow with the observationSource block for defining the task pipeline (e.g., http -> jsonparse -> multiply -> ethtx). Very important: Do not comment on the TOML code under any circumstances. This format does not accept comments. You can ignore the attached smart contract steps, including decode_logs and any step after multiply. I just want to create the Job and run it locally in my Chainlink node for testing without the smart contract part.'