.\run_tester_multiple.ps1 -Trials 20 -LoopsValue 10 -SolutionName toml1s -CorrectionPrompt 'The config.toml file should define a Chainlink job that creates an external price oracle. The job listens for oracle requests with external generated in the uuid standard. When triggered, it performs a GET request to the CoinGecko API to fetch the price of Ethereum in USD, parses the result, multiplies it by 100 (to handle decimals), and sends the result back . The data pipeline includes decoding the request log, HTTP fetch, JSON parsing, value multiplication, and data encoding for the response transaction. The job includes all essential Job Configuration properties at the top of the file. These include: type (defines the job type, e.g., "directrequest"), schemaVersion (typically set to 1), name (a human-readable identifier), externalJobID (choose a new unique UUID randomly), contractAddress (address of the triggering smart contract, required for job types like directrequest), evmChainID (identifies the EVM chain, e.g., 1 for Ethereum mainnet or 1337 for local testnets), forwardingAllowed (boolean, often false for direct requests), minIncomingConfirmations (minimum block confirmations before processing, e.g., 0), minContractPaymentLinkJuels (minimum LINK payment in juels, e.g., "0"), and maxTaskDuration (maximum time a task may run, e.g., "30s"). When generating or validating a job spec, include these fields with appropriate formatting and values based on the job type, and follow with the observationSource block for defining the task pipeline (e.g., http -> jsonparse -> multiply -> ethtx). Very important: Do not comment on the TOML code under any circumstances. This format does not accept comments. You can ignore the attached smart contract steps, including decode_logs and any step after multiply. I just want to create the Job and run it locally in my Chainlink node for testing without the smart contract part.'

.\run_tester_multiple.ps1 -Trials 20 -LoopsValue 10 -SolutionName toml1s -CorrectionPrompt 'You are creating a Chainlink job specification (.toml) for local testing purposes on a local Chainlink node, without any dependency on blockchain connections or actual smart contracts, i.e. it will run in a standalone setup. The job should simulate receiving oracle requests internally (without any contract interaction) and, upon being triggered locally, perform an HTTP GET request to the CoinGecko API to fetch the current Ethereum (ETH) price in USD. The fetched value must then be parsed from JSON, multiplied by 100 (to manage decimals as integer values), and logged internally without any blockchain response or transaction step (omit any steps related to decoding logs, encoding transactions, and sending Ethereum transactions—no blockchain interaction at all). The TOML file must include only essential and minimal configuration fields compatible with the Chainlink node for local-only job execution, specifically: type = "webhook"; schemaVersion = 1; name (use a simple descriptive identifier); externalJobID (generate a new unique UUID); evmChainID (use local EVM chain ID such as 1337 or a placeholder); maxTaskDuration (e.g., "30s"); observationSource block defining exactly these tasks in order: (1) An HTTP GET request to CoinGeckos Ethereum price API; (2) Parsing the JSON response to extract the ETH price in USD; (3) Multiplying the obtained value by 100; and (4) Logging or storing the result locally (no transaction, no ethtx step). Do NOT include any blockchain-related fields (like contractAddress, forwardingAllowed, minIncomingConfirmations, minContractPaymentLinkJuels), and absolutely avoid any comments or explanatory text within the TOML content itself. This job should be immediately executable as a standalone local test scenario, suitable for a Chainlink node running in isolation from any blockchain.'